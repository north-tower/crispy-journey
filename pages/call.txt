import {NavigationContainer} from '@react-navigation/native';
import {createNativeStackNavigator} from '@react-navigation/native-stack';
import 'intl-pluralrules';
import React, { useEffect, useState } from 'react';
import {I18nextProvider} from 'react-i18next';
import {SafeAreaView, StatusBar} from 'react-native';
//import {useCallDetection} from './src/hooks/useCallDetection';
import i18n from './src/lang/i18n';
import TabNavigation from './src/navigation/TabNavigation';
import LoginScreen from './src/screens/LoginScreen';
import PushNotification from 'react-native-push-notification';
import CallDetectorManager, {Event} from 'react-native-call-detection';
import AdDisplay from './src/components/AdDisplay';

const Stack = createNativeStackNavigator();

const App: React.FC = () => {
  // useCallDetection(event => {
  //   console.log('Call detected:', event);
  //   // You can add more logic here, such as showing a notification or updating the UI
  // });
  const key = Date.now().toString(); // Key must be unique everytime
  const [showAd, setShowAd] = useState<boolean>(false);


  useEffect(() => {
    // Create a channel (required for Android 8.0 and higher)
    PushNotification.createChannel(
     {
       channelId: key, // Required: You can change this id
       channelName: "Default Channel", // Required: You can change this name
       channelDescription: "A default channel", // Optional: Description of your channel
       soundName: "default", // Optional: 'default' means use the default sound
       importance: 4, // Optional: Default importance (4) is high
       vibrate: true, // Optional: Default is true
     },
     (created) => console.log(`createChannel returned '${created}'`) // Log if the channel was created successfully
   );
   // Configure Push Notifications
   PushNotification.configure({
     onNotification: function (notification) {
       console.log('NOTIFICATION:', notification);
     },
     popInitialNotification: true,
     requestPermissions: Platform.OS === 'ios',
   });
 }, []);


 useEffect(() => {
  const callDetector = new CallDetectorManager(
    (event: Event, number: string) => {
      console.log('event -> ', event + (number ? ' - ' + number : ''));
  

      if (event === 'Disconnected') {
        setShowAd(true); // Show ad when call is disconnected

        // Trigger a push notification when the call is disconnected
        PushNotification.localNotification({
          channelId: key, // Use the same channelId as created earlier
          title: "Call Disconnected",
          message: "A phone call has been disconnected.",
          playSound: true,
          soundName: "default",
          importance: "high",
          priority: "high",
        });
      }
    },
    true, // To detect incoming calls [ANDROID]
    () => {
      console.log('Permission Denied by User');
    },
    {
      title: 'Phone State Permission',
      message:
        'This app needs access to your phone state in order to react and/or to adapt to incoming calls.',
    },
  );

  return () => {
    callDetector.dispose(); // Clean up the call detector when the component unmounts
  };
}, []);

const handleCloseAd = () => {
  setShowAd(false);
};

  return (
<>
    {showAd ? (
      <AdDisplay
        adImage="https://cdn.worldvectorlogo.com/logos/coca-cola-2021.svg"
        adLink="https://videos.pexels.com/video-files/7722624/7722624-uhd_1440_2560_25fps.mp4"
        onClose={handleCloseAd}
      />
    ) : (
    <I18nextProvider i18n={i18n}>
      <NavigationContainer>
        <SafeAreaView style={{flex: 1, backgroundColor: '#161622'}}>
          <StatusBar barStyle="light-content" backgroundColor="#161622" />
          <Stack.Navigator initialRouteName="Tabs">
            <Stack.Screen
              name="Tabs"
              component={TabNavigation}
              options={{headerShown: false}}
            />
            <Stack.Screen
              name="Login"
              component={LoginScreen}
              options={{headerShown: false}}
            />
          </Stack.Navigator>
        </SafeAreaView>
      </NavigationContainer>
    </I18nextProvider>
    )}

</>

  );
};

export default App;
